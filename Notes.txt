class <className>
{
	variables & Methods
}

tags <tagname> </tagname>

-- each tag will consists of attributes
-- attributes consists of two types

	1. Internal attributes
	2. External attributes

<html attributes> xxxxx </html>


Locators
==========

-- The following are be used to identify the target web element/field in the webpages

1. id
2. name
3. className
4. tagname - is used to identify the dynamic webelement
5. linkText
6. partialLinktext
7. xpath
8. cssSelector


WebDriver Methods
==================

1. get(String URL) - Used to launch the web application by declaring URL as an argument.

2. findElement() -- It will return a webelement which is matching with the locator value passed as an argument

Note 1: The locator value is matching with more than one element then, it will return the first element which identifies in the webpage

Note 2: If no element is found with the locator value then it will throws "NoSuchElement Exception" - Unable to locate element

 - include the waiting statement
 - change the locator and value



11-Nov
=======

xpath: It is one of the locator in selenium to identify the target element with notation

-- We have two types of xpaths

	1. Absolute xpath
	2. Relative xpath

Absolute Xpath: By usng this xpath identify the target element from the source element in the webpage by declaring tagnames

/html/body/div[1]/div[1]/div[2]/div[1]/div[2]/div/div/div[2]/div/div[1]/div/form/span/section/div/div/div[1]/div[1]/div[1]/div/div[1]/div/div[1]/


Relative Xpath- Directly focusing on the target element with the signature

1. Single Attribute

	.//tagName[@attribute='value']

2. Multiple Attributes

	.//tagName[@attribute1 = 'value'][@attribute2='value'] ....

3. Replacing the tagName with Notation *

	.//*[@attribute='value']

Note: * represents any tagName

4. text() method

	.//tagName[text()='Complete value']

12- Nov
=========

5. contains()

	.//tagName[contains(@attribute,'partial value')]

	.//tagName[contains(text(),'partial value')]


//*[text()='Create an account'] --- 4 

(//*[text()='Create an account'])[2]

(//*[contains(text(),'Create')])[2]

(//*[contains(text(),'account')])[2]


6. starts-with()

	.//tagName[starts-with(@attribute,'starting value of an attribute')]

	.//tagName[starts-with(text(),'starting value of an attribute')]

7. OR & AND

	.//tagName[@attribute1='value' or @attriute2='value']

	.//tagName[@attribute1='value' and @attriute2='value']



CSS Selector
==============
1. ID attribute

//tagName[@id='value']

<tagname><#><value> -- input#firstName

2. class attribute

<tagname><.><value> --- input.VfPpkd-muHVFf-bMcfAe

3. Name attribute

<tagname>[name='value']--- input[name='firstName']

4. Prefix value

<tagName>[attribute^='prefix value'] --- input[id^='first']

5. Suffix Value

<tagName>[attribute$='suffix value'] --- input[id$='name']

6. substring value

<tagName>[attribute*='substring value'] --- input[id*='firstN']

13 Nov
========

WebDriver Methods
====================

1. get(String URL) - Used to launch the web application by passing the URL as an argument

2. findElement(Locator) - it is returning a webelement which is matching to the locator information

3. findElements(Locator) - it will return the List of webelements

4. close() - It will close the single browser window

5. quit() - It will closes all the browser windows in a perticular session


15 - Nov
========

6. getTitle() - It will return the title of a active webpage. Usually used to validate between the pages

7. getCurrentUrl() - It will return the active page URL.

Note: Usually the functionalities are validating either element or title of the page or URL of the page

8. navigation Methods
======================

to(Url) - used to launch the web application like 

forward()

back()

refresh()

16 - Nov
===========

9. how to handle the cookies
================================

Cookie - Cookie is a special type of file which is stored in the browser. It has the server and application information

CookieName, value, domain, path, expire, secure

Q) what are the different wait statements in selenium?

java - Thread.sleep(milliseconds);

ImplicitWait

ExplicitWait

FluentWait


10. How to handle alerts?
==============================
Alerts are be two types

1. Web based alert

2. window based alert

Note1: Defaultly in selenium we can handle only web based alerts with an Alert interface Methods

Note2: To handle window based alerts we can use third party tools or Robot class from Java

Alert Interface methods
======

1. getText() - Used to take the message on the alert

2. accept() - Used to click on the "OK" button

3. dismiss() - Used to click on the "CANCEL" button

4. refresh()

Robot Class  - https://docs.oracle.com/javase/7/docs/api/
============

-- The actual usage of Robot class is to automate the keyboard keys and Mouse actions

KeyPress()
KeyRelease()


Q) How to handle the multiple windows?

-- Whenever the new pages are opened in either separate window or tab, User need to switch the cursor between the windows/tabs to automate the respective page elements

-- Each window has it's unique id value and it was changing the from session to session

-- To take the corresponding window id value user can use the following methods

1. getWindowHandle() - it will return the single/active window id attribute value

2. getWindowHandles() - it will return all the window id attribute values from a session

Note - The target window identification can be done by either by element or title or url of the respective page on window

Q) How to handle the frames?

-- The frame is nothing but the nested page ( page inside a page)

-- The frames are implemented at source code by <frame/iframe> tag

Note:If a page has frames, the elements inside the frames are not identified until the user switches to the respective frame

-- To switch the cursor to the respective page we can pass either name or id attribute value

frame(String) // id or name

frame(int)

frame(WebElement)

defaultContent()

parentFrame()

Q) How to handle the keyword and mouse operations in selenium?

-- Actions class can be used to automate/handle the keyboard and mouse operation on the browser

Note: Every actions class statement must be ended with perform() method

Note: If user need to perform two actions in a single statement, those two actions can set as single action with the build() method

Mouse actions
============

1. moveToElement(WebElement)

2. moveToElement(WebElement, int x, int y)

3. moveByOffset(int x, int y)

4. clickAndHold(WebElement)

5. release(WebElement)

6. dragAndDrop(WebElement source, WebElement target)

7. dragAndDropBy(WebElement source, int x, int y)

8. contextClick(WebElement) - right click

9. doubleClick(WebElement)

10. click(WebElement)

Keyboard actions
=================

1. sendKeys()

2. keyDown()

3. keyUp()


